package com.basket.api.modules.user.controller;import com.basket.api.modules.user.entity.UserEntity;import com.basket.api.modules.user.useCases.CreateUserUseCase;import io.swagger.v3.oas.annotations.Operation;import io.swagger.v3.oas.annotations.media.Content;import io.swagger.v3.oas.annotations.media.Schema;import io.swagger.v3.oas.annotations.responses.ApiResponse;import io.swagger.v3.oas.annotations.responses.ApiResponses;import io.swagger.v3.oas.annotations.tags.Tag;import jakarta.validation.Valid;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestController@RequestMapping("/users")@Tag(name = "Usuários", description = "Endpoint para criação de usuários")public class UserController {    private final CreateUserUseCase createUserUseCase;    public UserController(CreateUserUseCase createUserUseCase) {        this.createUserUseCase = createUserUseCase;    }    @PostMapping    @Operation(summary = "Cria um novo usuário", description = "Registra um novo usuário no sistema com o papel padrão de 'USER'.")    @ApiResponses(value = {            @ApiResponse(responseCode = "200", description = "Usuário criado com sucesso", content = @Content(schema = @Schema(implementation = UserEntity.class))),            @ApiResponse(responseCode = "409", description = "Email já existente", content = @Content)    })    public ResponseEntity<Object> createUser(@Valid @RequestBody UserEntity userEntity) {        var result = this.createUserUseCase.execute(userEntity);        return ResponseEntity.ok().body(result);    }}